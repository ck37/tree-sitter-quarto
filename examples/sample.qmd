---
title: "Quarto Sample Document"
author: "Example Author"
format:
  html:
    code-fold: true
    theme: cosmo
execute:
  echo: true
  warning: false
---

## Introduction

This document demonstrates Quarto Markdown features that tree-sitter-quarto aims to parse.

See @fig-scatter for the relationship between variables, and @tbl-summary for descriptive statistics.

## Data Analysis

### Basic Computation

```{python}
#| label: setup
#| echo: false
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Generate sample data
np.random.seed(42)
x = np.random.randn(100)
y = 2 * x + np.random.randn(100)
data = pd.DataFrame({'x': x, 'y': y})
```

The mean of x is `{python} data['x'].mean()` and the mean of y is `{python} data['y'].mean()`.

### Visualization

```{python}
#| label: fig-scatter
#| fig-cap: "Scatter plot showing linear relationship"
#| fig-width: 8
#| fig-height: 6
#| echo: true
plt.figure(figsize=(8, 6))
plt.scatter(data['x'], data['y'], alpha=0.6)
plt.xlabel('X Variable')
plt.ylabel('Y Variable')
plt.title('Sample Scatter Plot')
plt.grid(True, alpha=0.3)
plt.show()
```

As shown in @fig-scatter, there is a clear positive correlation.

### Summary Statistics

```{python}
#| label: tbl-summary
#| tbl-cap: "Descriptive statistics"
summary = data.describe()
summary
```

::: {.callout-note}
## Important Note

The correlation coefficient is `{python} np.corrcoef(data['x'], data['y'])[0,1]:.3f`, indicating a strong linear relationship.
:::

## Multiple Languages

Quarto supports multiple computational engines:

```{r}
#| label: r-example
#| eval: false
# R code example (not executed)
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point()
```

```{julia}
#| label: julia-example
#| eval: false
# Julia code example (not executed)
using Plots
plot(rand(10))
```

## Advanced Features

### Tabsets

::: {.panel-tabset}
## Plot

```{python}
#| echo: false
plt.figure(figsize=(6, 4))
plt.plot(data['x'], data['y'], 'o', alpha=0.5)
plt.show()
```

## Data

```{python}
#| echo: false
data.head(10)
```

## Code

```python
# Full code
import matplotlib.pyplot as plt
plt.scatter(x, y)
```
:::

### Conditional Content

::: {.content-visible when-format="html"}
This content only appears in HTML output.
:::

::: {.content-hidden when-format="pdf"}
This content is hidden in PDF output.
:::

## Callout Types

::: {.callout-note}
This is a note callout.
:::

::: {.callout-warning}
This is a warning callout.
:::

::: {.callout-important}
This is an important callout.
:::

::: {.callout-tip}
This is a tip callout.
:::

::: {.callout-caution}
This is a caution callout.
:::

## Cross-References

### Figures
- See @fig-scatter for the main visualization

### Tables
- Refer to @tbl-summary for statistics

### Equations
Consider the equation:

$$
y = 2x + \epsilon
$$ {#eq-model}

As shown in @eq-model, the relationship is linear.

## Inline Code

Simple inline execution: The sum is `{python} sum([1, 2, 3, 4, 5])`.

You can also use the shorthand: The mean is `r mean(c(1,2,3))` (R syntax).

## Raw Blocks

```{=html}
<div class="custom">
  <p>Raw HTML content</p>
</div>
```

```{=latex}
\begin{equation}
E = mc^2
\end{equation}
```

## Citations

According to @knuth1984, literate programming is important.

See [@wickham2014; @wilkinson2005] for more on visualization.

## Div Attributes

::: {#custom-div .highlight style="background-color: #f0f0f0;"}
This div has custom attributes that tree-sitter-qmd should parse.
:::

## Chunk Options Edge Cases

```{python}
#| label: complex-options
#| echo: true
#| warning: false
#| message: false
#| fig-width: 10
#| fig-height: 8
#| fig-cap: |
#|   This is a multi-line caption
#|   that spans multiple lines
#| classes: [custom-class, another-class]
#| output: asis
print("Complex chunk options test")
```

## Conclusion

This document exercises most Quarto Markdown features that tree-sitter-quarto aims to parse, including:

1. ✅ Executable code cells with various languages
2. ✅ Chunk options (`#| key: value`)
3. ✅ Cross-references (@fig-, @tbl-, @eq-)
4. ✅ Inline code cells (`` `{python} expr` ``)
5. ✅ Callouts with different types
6. ✅ Tabsets and conditional content
7. ✅ Citations (@author)
8. ✅ Divs with attributes
9. ✅ Raw blocks for HTML/LaTeX
10. ✅ Multi-line chunk options

## References

::: {#refs}
:::
